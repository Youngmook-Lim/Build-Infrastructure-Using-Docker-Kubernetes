pipeline {

    agent {
        label 'agent'
    }

    environment {
        GIT_URL = 'https://github.com/SonarSource/sonar-scanning-examples.git'
        GIT_BRANCH = 'master'
        BUILD_PATH = 'sonarqube-scanner-gradle/gradle-basic'
        SONAR_LOGIN = 'admin'
        SONAR_PASSWORD = 'admin'
        SONAR_PORT = 9000
    }

    stages {

        stage('Pull from git') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
            }
        }

        stage('Launch Sonarqube') {
            steps {
                sh 'docker run --rm -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p ${SONAR_PORT}:9000 sonarqube:latest'
                script {
                    env.SONAR_HOST = "http://${sh(script:'docker exec sonarqube hostname -I', returnStdout: true).trim()}:${SONAR_PORT}"
                    waitForSonarQube("${SONAR_HOST}", 300)
                }
            }
        }

        stage('Get Sonarqube token') {
            steps {
                script {
                    def tokenOutput = sh(script: '''
                        USER_LOGIN=admin
                        TOKEN_NAME="My Jenkins Token"
                        MAX_RETRIES=12
                        RETRY_INTERVAL=5

                        for i in $(seq 1 $MAX_RETRIES); do
                            echo "Attempt #$i to get token..."
                            TOKEN=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" -X POST "${SONAR_HOST}/api/user_tokens/generate" \
                                -d "name=${TOKEN_NAME}" \
                                -d "login=${USER_LOGIN}" \
                                | sed -n 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/p')
                            if [ -n "$TOKEN" ]; then
                                echo "Token: ${TOKEN}"
                                break
                            else
                                echo "Token not received, waiting for $RETRY_INTERVAL seconds before retrying..."
                                sleep $RETRY_INTERVAL
                            fi
                        done

                        if [ -z "$TOKEN" ]; then
                            echo "Failed to get token after $MAX_RETRIES attempts."
                            exit 1
                        fi

                        echo "Token: ${TOKEN}"
                    ''', returnStdout: true).trim()

                    env.SONAR_TOKEN = tokenOutput.substring(tokenOutput.lastIndexOf("Token: ") + 7)
                    echo "Token: ${SONAR_TOKEN}"
                }
            }
        }

        stage('Sonarqube analysis') {
            steps {
                dir("${BUILD_PATH}") {
                    script {
                        // Get the project key
                        env.COMMIT_HASH = sh(script: "git ls-remote ${GIT_URL} HEAD | awk '{print \$1}'", returnStdout: true).trim()

                        // Get the repository name
                        def repositoryName = sh(script: "basename -s .git ${GIT_URL}", returnStdout: true).trim()

                        // Run the analysis
                        sh """
                            ./gradlew clean build sonar \\
                                -Dsonar.host.url=${SONAR_HOST} \\
                                -Dsonar.login=${SONAR_LOGIN} \\
                                -Dsonar.password=${SONAR_PASSWORD} \\
                                -Dsonar.projectKey=${COMMIT_HASH} \\
                                -Dsonar.projectName=${repositoryName} \\
                                -Dsonar.projectVersion=1.0 \\
                                -Dsonar.scm.disabled=true \\
                                -Dsonar.analysis.mode=publish \\
                                -Dsonar.verbose=true
                        """
                    }
                }
            }
        }

        stage('Sonarqube Quality Gate') {
            steps {
                script {
                    // Wait for analysis report to be processed by SonarQube
                    def waitTime = 0
                    def maxWaitTime = 60
                    def analysisStatus = 'NONE'
                    while (analysisStatus == 'NONE' && waitTime < maxWaitTime) {
                        def jsonAnalysis = sh(script: "curl -s ${SONAR_HOST}/api/qualitygates/project_status?projectKey=${COMMIT_HASH} -u ${SONAR_LOGIN}:${SONAR_PASSWORD}", returnStdout: true).trim()
                        analysisStatus = new groovy.json.JsonSlurper().parseText(jsonAnalysis).projectStatus.status
                        if (analysisStatus == 'NONE') {
                            echo 'Analysis report is still being processed by SonarQube, waiting for 10 seconds...'
                            sleep(10)
                            waitTime += 10
                        }
                    }

                    if (waitTime >= maxWaitTime) {
                        error('Timeout waiting for analysis report to be processed by SonarQube')
                    }

                    // Check quality gate status
                    if (analysisStatus == 'WARN') {
                        echo "Quality gate status: WARN. Aborting..."
                        exit pipeline
                    } else if (analysisStatus == 'ERROR') {
                        echo "Quality gate status: ERROR. Aborting..."
                        exit pipeline
                    }
                    echo "********** Quality gate status: ${analysisStatus} **********"
                }
            }
        }

        stage('Save Sonarqube Report') {
            steps {
                script {
                    // Fetch data from SonarQube Web API
                    def metrics = 'ncloc,coverage,violations,complexity,bugs,vulnerabilities,code_smells,sqale_index,alert_status,reliability_rating,security_rating'
                    def apiUrl = "${SONAR_HOST}/api/measures/component?component=${COMMIT_HASH}&metricKeys=${metrics}"
                    def jsonData = sh(script: "curl -s -u ${SONAR_LOGIN}:${SONAR_PASSWORD} '${apiUrl}'", returnStdout: true).trim()

                    // Fetch quality gate status
                    def qualityGateApiUrl = "${SONAR_HOST}/api/qualitygates/project_status?projectKey=${COMMIT_HASH}"
                    def qualityGateJsonData = sh(script: "curl -s -u ${SONAR_LOGIN}:${SONAR_PASSWORD} '${qualityGateApiUrl}'", returnStdout: true).trim()

                    // Save JSON data to files
                    writeFile file: 'sonarqube-report.json', text: jsonData
                    writeFile file: 'sonarqube-quality-gate-status.json', text: qualityGateJsonData

                    // Optional: Print the content of the JSON files
                    sh "cat sonarqube-report.json"
                    sh "cat sonarqube-quality-gate-status.json"
                }
            }
        }

        stage('Save Report') {
            steps {
                archiveArtifacts artifacts: 'sonarqube-report.json', fingerprint: true
            }
        }
    }

    post {
        always {
            sh 'docker stop sonarqube'
            cleanWs deleteDirs: true
        }
        failure {
            echo "You failed :("
        }
    }
}

def waitForSonarQube(sonarQubeUrl, timeout) {
    def running = false
    def remainingTime = timeout

    while (remainingTime > 0 && !running) {
        echo "Attempting to connect to SonarQube at ${sonarQubeUrl}"
        try {
            sh(script: "curl --max-time 10 --retry 0 --retry-max-time 10 --retry-connrefused --fail --silent ${sonarQubeUrl}/api/system/status", returnStdout: true)
            running = true
        } catch (Exception e) {
            remainingTime -= 10
            sleep(10)
        }
    }

    if (!running) {
        error("SonarQube did not start within the expected time.")
    }
}
