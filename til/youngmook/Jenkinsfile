pipeline {
    agent {
        label 'dock'
    }

    environment {
        SONAR_HOST = 'http://192.168.13.232:9001'
        SONAR_LOGIN='admin'
        SONAR_PASSWORD='admin'
    }

    tools {
        maven 'maven'
        gradle 'gradle'
    }

    stages {
        stage('Pull from git') {
            steps {
                sh 'rm -rf repo'
                sh 'mkdir repo'
                dir('repo') {
                    git branch: 'master', url: 'https://github.com/SonarSource/sonar-scanning-examples.git'
                }
            }
        }

        stage('Launch Sonarqube') {
            steps {
                sh 'docker run --rm -d --name sonarqube2 -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9001:9000 sonarqube:latest'
                script {
                    waitForSonarQube("${SONAR_HOST}", 300)
                }
            }
        }

        stage('Get Sonarqube token') {
            steps {
                script {
                    def tokenOutput = sh(script: '''
                        USER_LOGIN=admin
                        TOKEN_NAME="My Jenkins Token"
                        MAX_RETRIES=12
                        RETRY_INTERVAL=5

                        for i in $(seq 1 $MAX_RETRIES); do
                            echo "Attempt #$i to get token..."
                            TOKEN=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" -X POST "${SONAR_HOST}/api/user_tokens/generate" \
                                -d "name=${TOKEN_NAME}" \
                                -d "login=${USER_LOGIN}" \
                                | sed -n 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/p')
                            if [ -n "$TOKEN" ]; then
                                echo "Token: ${TOKEN}"
                                break
                            else
                                echo "Token not received, waiting for $RETRY_INTERVAL seconds before retrying..."
                                sleep $RETRY_INTERVAL
                            fi
                        done

                        if [ -z "$TOKEN" ]; then
                            echo "Failed to get token after $MAX_RETRIES attempts."
                            exit 1
                        fi

                        echo "Token: ${TOKEN}"
                    ''', returnStdout: true).trim()

                    env.TOKEN = tokenOutput.substring(tokenOutput.lastIndexOf("Token: ") + 7)
                    echo "Token: ${TOKEN}"
                }
            }
        }

        stage('Configure SonarQube server in Jenkins') {
            steps {
                script {
                    // Set Jenkins URL and CLI JAR location
                    def jenkinsUrl = "http://192.168.6.9:8080"

                    // Set Jenkins user and API token
                    def jenkinsUser = "admin"
                    def jenkinsApiToken = "1179474944b621f91eaa44898c84a0207e"

                    // Prepare the Groovy script to create or update the SonarQube server configuration
                    def groovyScript = '''
                    import jenkins.model.*
                    import hudson.plugins.sonar.*
                    import hudson.plugins.sonar.model.*

                    String sonarQubeName = "SonarQube Server"
                    String sonarQubeUrl = "${SONAR_HOST}"
                    String token = "${TOKEN}"

                    Jenkins jenkins = Jenkins.getInstanceOrNull()
                    SonarGlobalConfiguration sonarGlobalConfiguration = jenkins.getDescriptorByType(SonarGlobalConfiguration.class)

                    List<SonarInstallation> installations = sonarGlobalConfiguration.getInstallations().toList()

                    // Find existing SonarQube configuration or create a new one
                    SonarInstallation sonarInstallation = installations.find { it.getName() == sonarQubeName }
                    if (sonarInstallation == null) {
                        sonarInstallation = new SonarInstallation(sonarQubeName, sonarQubeUrl, token, "", "", "", "")
                        installations.add(sonarInstallation)
                    } else {
                        installations.remove(sonarInstallation)
                        sonarInstallation = new SonarInstallation(sonarQubeName, sonarQubeUrl, token, sonarInstallation.getMojoVersion(), sonarInstallation.getProperties(), sonarInstallation.getTriggers(), sonarInstallation.getAdditionalAnalysisProperties())
                        installations.add(sonarInstallation)
                    }

                    // Update the SonarQube server configuration in Jenkins
                    sonarGlobalConfiguration.setInstallations(installations.toArray(new SonarInstallation[0]))
                    sonarGlobalConfiguration.save()
                    println "SonarQube server '${sonarQubeName}' configured in Jenkins."
                '''

                // Save the Groovy script to a file
                writeFile file: 'configure_sonarqube.groovy', text: groovyScript

                // Download the Jenkins CLI JAR file
                sh "curl -sSL -o jenkins-cli.jar ${jenkinsUrl}/jnlpJars/jenkins-cli.jar"

                // Execute the Groovy script using the Jenkins CLI
                sh "java -jar jenkins-cli.jar -auth ${jenkinsUser}:${jenkinsApiToken} -s ${jenkinsUrl} groovy = < configure_sonarqube.groovy"
                }
            }
        }


        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv("SonarQube Server") {
                    sh 'pwd'
                    dir('repo/sonarqube-scanner-gradle/gradle-basic') {
                        sh 'chmod +x gradlew'
                        sh './gradlew sonarqube'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "always"
            sh 'docker stop sonarqube2'
        }
        failure {
            echo "You failed :("
        }
    }
}

def waitForSonarQube(sonarQubeUrl, timeout) {
    def running = false
    def remainingTime = timeout

    while (remainingTime > 0 && !running) {
        echo "Attempting to connect to SonarQube at ${sonarQubeUrl}"
        try {
            sh(script: "curl --max-time 10 --retry 0 --retry-max-time 10 --retry-connrefused --fail --silent ${sonarQubeUrl}/api/system/status", returnStdout: true)
            running = true
        } catch (Exception e) {
            remainingTime -= 10
            sleep(10)
        }
    }

    if (!running) {
        error("SonarQube did not start within the expected time.")
    }
}
