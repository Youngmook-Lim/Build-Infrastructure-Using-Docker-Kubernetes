pipeline {
    agent {
        label 'agent'
    }

    environment {
        GIT_URL = 'https://github.com/SonarSource/sonar-scanning-examples.git'
        GIT_BRANCH = 'master'
        SONAR_LOGIN = 'admin'
        SONAR_PASSWORD = 'admin'
        SONAR_PORT = 9000
    }

    stages {

        stage('Pull from git') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
            }
        }

        stage('Launch Sonarqube') {
            steps {
                sh 'docker run --rm -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p ${SONAR_PORT}:9000 sonarqube:latest'
                script {
                    env.SONAR_HOST = "http://${sh(script:'docker exec sonarqube hostname -I', returnStdout: true).trim()}:${SONAR_PORT}"
                    waitForSonarQube("${SONAR_HOST}", 300)
                }
            }
        }

        stage('Get Sonarqube token') {
            steps {
                script {
                    def tokenOutput = sh(script: '''
                        USER_LOGIN=admin
                        TOKEN_NAME="My Jenkins Token"
                        MAX_RETRIES=12
                        RETRY_INTERVAL=5

                        for i in $(seq 1 $MAX_RETRIES); do
                            echo "Attempt #$i to get token..."
                            TOKEN=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" -X POST "${SONAR_HOST}/api/user_tokens/generate" \
                                -d "name=${TOKEN_NAME}" \
                                -d "login=${USER_LOGIN}" \
                                | sed -n 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/p')
                            if [ -n "$TOKEN" ]; then
                                echo "Token: ${TOKEN}"
                                break
                            else
                                echo "Token not received, waiting for $RETRY_INTERVAL seconds before retrying..."
                                sleep $RETRY_INTERVAL
                            fi
                        done

                        if [ -z "$TOKEN" ]; then
                            echo "Failed to get token after $MAX_RETRIES attempts."
                            exit 1
                        fi

                        echo "Token: ${TOKEN}"
                    ''', returnStdout: true).trim()

                    env.TOKEN = tokenOutput.substring(tokenOutput.lastIndexOf("Token: ") + 7)
                    echo "Token: ${TOKEN}"
                }
            }
        }

        stage('Sonarqube analysis') {
            steps {
                script {
                    sh """
                        cd sonarqube-scanner-gradle/gradle-basic
                        ./gradlew sonar \
                            -Dsonar.projectKey=my_project \
                            -Dsonar.host.url=${SONAR_HOST} \
                            -Dsonar.login=${TOKEN}
                    """
                }
            }
        }
    }

    post {
        always {
            sh 'docker stop sonarqube'
            cleanWs deleteDirs: true
        }
        failure {
            echo "You failed :("
        }
    }
}

def waitForSonarQube(sonarQubeUrl, timeout) {
    def running = false
    def remainingTime = timeout

    while (remainingTime > 0 && !running) {
        echo "Attempting to connect to SonarQube at ${sonarQubeUrl}"
        try {
            sh(script: "curl --max-time 10 --retry 0 --retry-max-time 10 --retry-connrefused --fail --silent ${sonarQubeUrl}/api/system/status", returnStdout: true)
            running = true
        } catch (Exception e) {
            remainingTime -= 10
            sleep(10)
        }
    }

    if (!running) {
        error("SonarQube did not start within the expected time.")
    }
}
