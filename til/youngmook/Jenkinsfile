pipeline {
    agent {
        label 'dock'
    }

    environment {
        SONAR_HOST = 'http://192.168.13.232:9001'
        SONAR_LOGIN = 'admin'
        SONAR_PASSWORD = 'admin'
    }

    tools {
        maven 'maven'
        gradle 'gradle'
    }

    stages {
        stage('Pull from git') {
            steps {
                sh 'rm -rf repo'
                sh 'mkdir repo'
                dir('repo') {
                    git branch: 'master', url: 'https://github.com/SonarSource/sonar-scanning-examples.git'
                }
            }
        }

        stage('Launch Sonarqube') {
            steps {
                sh 'docker run --rm -d --name sonarqube2 -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9001:9000 sonarqube:latest'
                script {
                    waitForSonarQube("${SONAR_HOST}", 300)
                }
            }
        }

        stage('Get Sonarqube token') {
            steps {
                script {
                    def tokenOutput = sh(script: '''
                        USER_LOGIN=admin
                        TOKEN_NAME="My Jenkins Token"
                        MAX_RETRIES=12
                        RETRY_INTERVAL=5

                        for i in $(seq 1 $MAX_RETRIES); do
                            echo "Attempt #$i to get token..."
                            TOKEN=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" -X POST "${SONAR_HOST}/api/user_tokens/generate" \
                                -d "name=${TOKEN_NAME}" \
                                -d "login=${USER_LOGIN}" \
                                | sed -n 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/p')
                            if [ -n "$TOKEN" ]; then
                                echo "Token: ${TOKEN}"
                                break
                            else
                                echo "Token not received, waiting for $RETRY_INTERVAL seconds before retrying..."
                                sleep $RETRY_INTERVAL
                            fi
                        done

                        if [ -z "$TOKEN" ]; then
                            echo "Failed to get token after $MAX_RETRIES attempts."
                            exit 1
                        fi

                        echo "Token: ${TOKEN}"
                    ''', returnStdout: true).trim()

                    env.TOKEN = tokenOutput.substring(tokenOutput.lastIndexOf("Token: ") + 7)
                    echo "Token: ${TOKEN}"
                }
            }
        }

        stage('Configure SonarQube server in Jenkins') {
            steps {
                script {
                   // Replace '<your-jenkins-url>' with your actual Jenkins URL
                    JENKINS_API_URL = "http://192.168.6.9:8080"
                    JENKINS_CREDS_URL = "${JENKINS_API_URL}/sonarqube/credentials/store/system/domain/_/createCredentials"

                    // Replace '<your-jenkins-username>' and '<your-jenkins-password>' with your actual Jenkins username and password
                    JENKINS_AUTH = "admin:admin"

                    // Get Jenkins crumb
                    def jenkinsCrumb = sh(script: "curl -u ${JENKINS_AUTH} '${JENKINS_API_URL}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)'", returnStdout: true).trim()

                    // Create the JSON payload for credentials
                    JENKINS_CREDS_PAYLOAD = '''{
                        "": "0",
                        "credentials": {
                            "scope": "GLOBAL",
                            "id": "sonarqube_token",
                            "username": "admin",
                            "password": "${TOKEN}",
                            "description": "SonarQube token",
                            "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
                        }
                    }'''

                    // Create the credentials with the crumb included as a header
                    sh "curl -X POST -u ${JENKINS_AUTH} --header 'Content-Type: application/json' --header '${jenkinsCrumb}' -d '${JENKINS_CREDS_PAYLOAD}' ${JENKINS_CREDS_URL}"
                }
            }
        }


        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv("SonarQube Server") {
                    sh 'pwd'
                    dir('repo/sonarqube-scanner-gradle/gradle-basic') {
                        sh 'chmod +x gradlew'
                        sh './gradlew sonarqube'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "always"
            sh 'docker stop sonarqube2'
        }
        failure {
            echo "You failed :("
        }
    }
}

def waitForSonarQube(sonarQubeUrl, timeout) {
    def running = false
    def remainingTime = timeout

    while (remainingTime > 0 && !running) {
        echo "Attempting to connect to SonarQube at ${sonarQubeUrl}"
        try {
            sh(script: "curl --max-time 10 --retry 0 --retry-max-time 10 --retry-connrefused --fail --silent ${sonarQubeUrl}/api/system/status", returnStdout: true)
            running = true
        } catch (Exception e) {
            remainingTime -= 10
            sleep(10)
        }
    }

    if (!running) {
        error("SonarQube did not start within the expected time.")
    }
}
