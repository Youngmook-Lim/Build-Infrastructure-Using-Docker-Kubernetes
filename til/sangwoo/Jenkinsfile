pipeline {
    agent {
        label 'agent'
    }

    environment {
        GIT_URL = 'https://github.com/miracle3070/jenkins-build-test'
        AUTHENTICATION_ID = 'jenkins_api_token123'
    }

    parameters {
        // string(name: 'gitUrl', defaultValue: 'test', description: 'Git URL')
        // string(name: 'buildEnv', defaultValue: 'gradle', description: 'Build environment')
        // string(name: 'language', defaultValue: 'java', description: 'Programming language')
        // string(name: 'branch', defaultValue: 'rtyaes', description: 'Programming language')
        string(name: 'commitHash', defaultValue: 'hash1231241421', description: 'Input commit hash to build')
    }


    stages {

        stage('Check Commit Hash') {
            steps {
                script {
                    // Git Remote Repository에서 가장 최근 commit hash 값을 얻어옴. (기능 변경으로 인해 필요없는 코드임.)
                    // def latestCommit = sh(script: "git ls-remote ${GIT_URL} HEAD | awk '{print \$1}'", returnStdout: true).trim()
                    // echo "Latest commit hash: ${latestCommit}"

                    def targetCommit = params.commitHash.trim()
                    echo "User provided commit hash: ${targetCommit}"

                    def buildStatusUrl = "${env.JENKINS_URL}/job/${env.JOB_NAME}/api/json?tree=allBuilds[result,actions[buildsByBranchName[*[*]]]]"
                    def buildStatusResponse = httpRequest(url: buildStatusUrl, authentication: AUTHENTICATION_ID, acceptType: 'APPLICATION_JSON')
                    def buildStatusJson = readJSON text: buildStatusResponse.content

                    def commitBuilt = false
                    for (build in buildStatusJson.allBuilds) {
                        def branchBuildInfo = build.actions.find { it.buildsByBranchName }
                        if (branchBuildInfo) {
                            def commitInfo = branchBuildInfo.buildsByBranchName.values().find { it.revision.SHA1.startsWith(targetCommit) }
                            if (commitInfo && build.result == 'SUCCESS') {
                                commitBuilt = true
                                break
                            }
                        }
                    }

                    if (commitBuilt) {
                        echo "Target commit ${targetCommit} was built successfully. Stopping the build."
                        currentBuild.result = 'ABORTED'
                        error("Build was aborted because the target commit ${targetCommit} has already been built successfully.")
                    } else {
                        echo "Target commit ${targetCommit} was not built or not built successfully. Continuing the build."
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    // Replace 'BRANCH_NAME' with the desired branch name
                    // Replace 'COMMIT_HASH' with the desired commit hash value
                    def BRANCH_NAME = 'master'
                    def COMMIT_HASH = params.commitHash.trim()

                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[url: "${GIT_URL}", refspec: "+refs/heads/${BRANCH_NAME}:refs/remotes/origin/${BRANCH_NAME}"]]
                    ])

                    sh "git checkout ${COMMIT_HASH}"
                }
            }
        }

        stage('Build') {
            steps {
                // Your build steps go here
                echo "Building the project..."
            }
        }

        stage('Test') {
            steps {
                // Your test steps go here
                echo "Testing the project..."
            }
        }

        stage('Deploy') {
            steps {
                // Your deploy steps go here
                echo "Deploying the project..."
            }
        }
    }
}