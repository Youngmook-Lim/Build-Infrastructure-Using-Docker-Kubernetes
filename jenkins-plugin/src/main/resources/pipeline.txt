    stages {
        stage('Set Environment Variables') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'sonar_login', variable: 'SONAR_LOGIN'),
                        string(credentialsId: 'sonar_password', variable: 'SONAR_PASSWORD'),
                        string(credentialsId: 'sonar_port', variable: 'SONAR_PORT'),
                        string(credentialsId: 'jenkins_port', variable: 'JENKINS_PORT'),
                        string(credentialsId: 'host_bind_mount', variable: 'HOST_BIND_MOUNT'),
                    ]) {
                        env.SONAR_LOGIN = "${SONAR_LOGIN}"
                        env.SONAR_PASSWORD = "${SONAR_PASSWORD}"
                        env.SONAR_PORT = "${SONAR_PORT}"
                        env.JENKINS_PORT = "${JENKINS_PORT}"
                        env.HOST_BIND_MOUNT = "${HOST_BIND_MOUNT}"

                        // parameters -> env
                        env.BUILD_ENV = "${params.BUILD_ENV}"
                        env.LANGUAGE = "${params.LANGUAGE}"
                        env.GIT_BRANCH = "${params.GIT_BRANCH}"
                        env.COMMIT_HASH = "${params.COMMIT_HASH}"
                    }
                }
            }
        }

        stage('Check Commit Hash') {
            steps {
                script {
                    env.TARGET_COMMIT = "${COMMIT_HASH}".trim()
                    if("${TARGET_COMMIT}" == '') {
                        env.TARGET_COMMIT = sh(script: "git ls-remote ${GIT_URL} ${params.GIT_BRANCH} | awk '{print \$1}'", returnStdout: true).trim()
                        if("${TARGET_COMMIT}" == '') {
                            echo "Can't find target branch's commit hash"
                            currentBuild.result = 'ABORTED'
                            error("Build was aborted because the ${GIT_BRANCH} branch doesn't exist.")
                        }
                        echo "TARGET_COMMIT: ${TARGET_COMMIT}"
                        echo "Latest commit hash for branch ${GIT_BRANCH}: ${TARGET_COMMIT}"
                    } else {
                        echo "User provided commit hash: ${TARGET_COMMIT}"
                    }

                    def buildStatusUrl = "${JENKINS_URL}/job/${JOB_NAME}/api/json?tree=allBuilds[result,actions[buildsByBranchName[*[*]]]]"
                    def buildStatusResponse = httpRequest(url: buildStatusUrl, authentication: "authentication_id", acceptType: 'APPLICATION_JSON')
                    def buildStatusJson = readJSON text: buildStatusResponse.content

                    def commitBuilt = false
                    for (build in buildStatusJson.allBuilds) {
                        def branchBuildInfo = build.actions.find { it.buildsByBranchName }
                        if (branchBuildInfo) {
                            def commitInfo = branchBuildInfo.buildsByBranchName.values().find { it.revision.SHA1.startsWith("${TARGET_COMMIT}") }
                            if (commitInfo && build.result == 'SUCCESS') {
                                commitBuilt = true
                                break
                            }
                        }
                    }

                    if (commitBuilt) {
                        echo "Target commit ${TARGET_COMMIT} was built successfully. Stopping the build."
                        currentBuild.result = 'ABORTED'
                        error("Build was aborted because the target commit ${TARGET_COMMIT} has already been built successfully.")
                    } else {
                        echo "Target commit ${TARGET_COMMIT} was not built or not built successfully. Continuing the build."
                    }
                }
            }
        }


        stage('Clone Repository') {
            steps {
                script {
                    dir("repo") {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: "${GIT_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: "${GIT_URL}", refspec: "+refs/heads/${GIT_BRANCH}:refs/remotes/origin/${GIT_BRANCH}"]]
                        ])

                        sh "git checkout ${TARGET_COMMIT}"
                    }
                }
            }
        }

        stage('Transfer Script to Agent') {
            steps {
                script {
                    // Switch to the master agent
                    node('master') {
                        dir("${LANGUAGE}/${BUILD_ENV}") {
                            stash name: "${LANGUAGE}-${BUILD_ENV}", includes: "*.sh"
                        }
                    }

                    // Switch back to the agent node and unstash the script file
                    dir('scripts') {
                        unstash "${LANGUAGE}-${BUILD_ENV}"
                        sh "pwd"
                        sh "ls"
                        sh "chmod +x *.sh"
                    }
                }
            }
        }

        stage('Launch Sonarqube container') {
            steps {
                sh 'docker run --rm -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p ${SONAR_PORT}:9000 sonarqube:latest'
                script {
                    env.SONAR_HOST = "http://${sh(script:'docker exec sonarqube hostname -I', returnStdout: true).trim()}:${SONAR_PORT}"
                    waitForSonarQube("${SONAR_HOST}", 300)
                }
            }
        }

        stage('Get Sonarqube token') {
            steps {
                script {
                    def tokenOutput = sh(script: '''
                        USER_LOGIN=admin
                        TOKEN_NAME="My Jenkins Token"
                        MAX_RETRIES=12
                        RETRY_INTERVAL=5

                        for i in $(seq 1 $MAX_RETRIES); do
                            echo "Attempt #$i to get token..."
                            TOKEN=$(curl -s -u "${SONAR_LOGIN}:${SONAR_PASSWORD}" -X POST "${SONAR_HOST}/api/user_tokens/generate" \
                                -d "name=${TOKEN_NAME}" \
                                -d "login=${USER_LOGIN}" \
                                | sed -n 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/p')
                            if [ -n "$TOKEN" ]; then
                                echo "Token: ${TOKEN}"
                                break
                            else
                                echo "Token not received, waiting for $RETRY_INTERVAL seconds before retrying..."
                                sleep $RETRY_INTERVAL
                            fi
                        done

                        if [ -z "$TOKEN" ]; then
                            echo "Failed to get token after $MAX_RETRIES attempts."
                            exit 1
                        fi

                        echo "Token: ${TOKEN}"
                    ''', returnStdout: true).trim()

                    env.SONAR_TOKEN = tokenOutput.substring(tokenOutput.lastIndexOf("Token: ") + 7)
                }
            }
        }

        stage('Sonarqube Scan') {
            steps {
                dir("${WORKSPACE}") {
                    script {
                        def repositoryName = sh(script: "basename -s .git ${GIT_URL}", returnStdout: true).trim()

                        sh "./scripts/sonar.sh ${SONAR_HOST} ${SONAR_LOGIN} ${SONAR_PASSWORD} ${TARGET_COMMIT} ${repositoryName} ${WORKSPACE}/repo/${BUILD_PATH}"
                    }
                }
            }
        }

        stage('Sonarqube Quality Gate') {
            steps {
                script {
                    // Wait for analysis report to be processed by SonarQube
                    def waitTime = 0
                    def maxWaitTime = 60
                    def analysisStatus = 'NONE'
                    while (analysisStatus == 'NONE' && waitTime < maxWaitTime) {
                        def jsonAnalysis = sh(script: "curl -s ${SONAR_HOST}/api/qualitygates/project_status?projectKey=${TARGET_COMMIT} -u ${SONAR_LOGIN}:${SONAR_PASSWORD}", returnStdout: true).trim()
                        analysisStatus = new groovy.json.JsonSlurper().parseText(jsonAnalysis).projectStatus.status
                        if (analysisStatus == 'NONE') {
                            echo 'Analysis report is still being processed by SonarQube, waiting for 10 seconds...'
                            sleep(10)
                            waitTime += 10
                        }
                    }

                    if (waitTime >= maxWaitTime) {
                        error('Timeout waiting for analysis report to be processed by SonarQube')
                    }

                    // Check quality gate status
                    if (analysisStatus == 'WARN') {
                        echo "Quality gate status: WARN. Aborting..."
                        exit pipeline
                    } else if (analysisStatus == 'ERROR') {
                        echo "Quality gate status: ERROR. Aborting..."
                        exit pipeline
                    }
                    echo "********** Quality gate status: ${analysisStatus} **********"
                }
            }
        }

        stage('Save Sonarqube Report') {
            steps {
                script {
                    def metrics = 'ncloc,coverage,violations,complexity,bugs,vulnerabilities,code_smells,sqale_index,alert_status,reliability_rating,security_rating'

                    def apiUrl = "${SONAR_HOST}/api/measures/component?component=${TARGET_COMMIT}&metricKeys=${metrics}"

                    def jsonData = sh(script: "curl -s -u ${SONAR_LOGIN}:${SONAR_PASSWORD} '${apiUrl}'", returnStdout: true).trim()

                    def qualityGateApiUrl = "${SONAR_HOST}/api/qualitygates/project_status?projectKey=${TARGET_COMMIT}"

                    def qualityGateJsonData = sh(script: "curl -s -u ${SONAR_LOGIN}:${SONAR_PASSWORD} '${qualityGateApiUrl}'", returnStdout: true).trim()

                    def reportData = readJSON text: jsonData

                    def qualityGateData = readJSON text: qualityGateJsonData

                    def qualityGateStatus = qualityGateData['projectStatus']['status']

                    def tableRows = reportData['component']['measures'].collect { measure ->
                        """
                            <tr>
                                <td>${measure['metric']}</td>
                                <td>${measure['value']}</td>
                            </tr>
                        """
                    }.join("")

                    def html = """
                        <html>
                            <head>
                                <title>SonarQube Report</title>
                                <style>
                                    body {
                                        font-family: Arial, sans-serif;
                                    }
                                    h1 {
                                        font-size: 24px;
                                    }
                                    h2 {
                                        font-size: 20px;
                                        margin-bottom: 10px;
                                    }
                                    table {
                                        border-collapse: collapse;
                                        width: 100%;
                                    }
                                    th, td {
                                        border: 1px solid #ddd;
                                        padding: 8px;
                                        text-align: left;
                                    }
                                    th {
                                        background-color: #f2f2f2;
                                        font-weight: bold;
                                    }
                                </style>
                            </head>
                            <body>
                                <h1>SonarQube Report</h1>
                                <h2>SonarQube Quality Gate Status: ${qualityGateStatus}</h2>
                                <h2>Report Data</h2>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Metric</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${tableRows}
                                    </tbody>
                                </table>
                            </body>
                        </html>
                    """
                    writeFile file: 'sonarqube-report.html', text: html
                }
            }
        }

        stage('Save Report') {
            steps {
                archiveArtifacts artifacts: 'sonarqube-report.html', fingerprint: true
            }
        }

        stage('Build') {
            steps {
                script {
                    dir("${WORKSPACE}/scripts") {
                        sh "./build.sh ${HOST_BIND_MOUNT} ${JOB_NAME} ${BUILD_PATH}"
                    }

                }
            }
            post {
                failure {
                    script {
                        echo "BUILD FAILED!"
                        if (!readFile('jenkins_build_log').contains("FAILED")) {
                            // build job: env.JOB_NAME, parameters: [number(name: 'PRIORITY', value: 10)], wait: true
                            build job: env.JOB_NAME, wait: true
                            exit pipeline
                        }
                    }
                }
            }
        }

        stage('deploy artifacts') {
            steps {
                archiveArtifacts artifacts: "repo/${BUILD_PATH}/build/libs/*", followSymlinks: false
            }
        }
    }

    post {
        always {
          script {
            sh 'docker stop sonarqube'
            cleanWs deleteDirs: true
          }
        }
    }
}

def waitForSonarQube(sonarQubeUrl, timeout) {
    def running = false

    for (int i = 0; i < timeout && !running; i += 10) {
        echo "Attempting to connect to SonarQube at ${sonarQubeUrl}"
        try {
            sh(script: "curl --max-time 10 --retry 0 --retry-max-time 10 --retry-connrefused --fail --silent ${sonarQubeUrl}/api/system/status", returnStdout: true)
            running = true
        } catch (Exception e) {
            sleep(10)
        }
    }

    if (!running) {
        error("SonarQube did not start within the expected time.")
    }
}